find continous subarray with atleast one number that has the largest sum return the sum print subarray


arr=[-2,1,-3,4,-1,2,1,-5,4]
output=6

arr=[4,-1,2,1]
output=6

arr=[1]
output:1
//edge case if size==1 return arr[0]


using three loops:

int maxSubArray(vector < int > & nums, vector < int > & subarray) {
  int max_sum = INT_MIN;
  int n = nums.size();
  if (n == 1) {
    return nums[0];
  }
  int i, j;
  for (i = 0; i <= n - 1; i++) {
    for (j = i; j <= n - 1; j++) {
      int sum = 0;
      for (int k = i; k <= j; k++)
        sum = sum + nums[k];
      if (sum > max_sum) {
        subarray.clear();
        max_sum = sum;
        subarray.push_back(i);
        subarray.push_back(j);

      }
    }
  }
  return max_sum;
}


using two loops and a curr_sum variable
int maxSubArray(vector < int > & nums, vector < int > & subarray) {
  int max_sum = INT_MIN;
  for (int i = 0; i < nums.size(); i++) {
    int curr_sum = 0;
    for (int j = i; j < nums.size(); j++) {
      curr_sum += nums[j];
      if (curr_sum > max_sum) {
        subarray.clear();
        max_sum = curr_sum;
        subarray.push_back(i);
        subarray.push_back(j);
      }
    }
  }
  return max_sum;
}

kadanes algo
--linear time complexity
max_so_far --msf
max_sum_ending at ith index--meh
start--starting index of the ans's subarray
end --to get ending index of ans's subarray


approach: traverse from start and add ith element to meh
check if we can now add ith element to msf or not
if yea then update the msf ,start and end 

int msf=INT_MIN,meh=0;
int s=0;
for(int i=0;i<nums.size();i++){
meh+=nums[i];
if(meh>msf){
msf=meh;
subarray.clear();
subarray.push_back(s);
subarray.push_back(i);
}
if(meh<0){
meh=0;
//we are doing so because in any case carrying negative sum will make the overall subarray
//sum as less so we update the sum as zero and then we
//carry a subarrray as long as it gives a positive subarray 
s=i+1;
}
}
return msf;



code:
 int maxSubArray(vector<int>& nums) {
        if(nums.size()==1)
        return nums[0];
        int sum=0;
        int max_sum=INT_MIN;
        for(auto i:nums){
            sum+=i;
            max_sum=max(sum,max_sum);
            if(sum<0){
                sum=0;
            }
        }
        return max_sum;






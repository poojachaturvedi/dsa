
BRUTE FORCE IN FINDING THE DIVISORS:
//time complexity is O(N) 
#include<bits/stdc++.h>

using namespace std;

void brute_force_divisors(int n){
    vector<int> divisors;
    for(int i=1;i<=n;i++){
        if(n%i==0){
            divisors.push_back(i);
        }
    }
    for( auto divisor: divisors){
        cout<<divisor<<" ";
        
    }
    cout<<endl;
}

int main(){
    int t;
    cin>>t;
    while (t--){
        cout<<"Enter a number whose divisiors you want to print:";
        int n;
        cin>>n;
        brute_force_divisors(n);
    }
    return 0;
    
}



SQUAREROOT CONCEPT OF THE DIVISORS FINDING 
//time complexity of this code in O(sqrt(N))
#include<bits/stdc++.h>

using namespace std;

void using_sqrt_concept(int n){
    set<int> divisors;
    for(int i=1;i*i<=n;i++){
        if(n%i==0){
            divisors.insert(i);
            int b=n/i;
            divisors.insert(b);
        }
    }
    for( auto divisor: divisors){
        cout<<divisor<<" ";
        
    }
    cout<<endl;
}

int main(){
    int t;
    cin>>t;
    while (t--){
        cout<<"Enter a number whose divisiors you want to print:";
        int n;
        cin>>n;
        using_sqrt_concept(n);
    }
    return 0;
    
}





allowed to move in four directions 

count number of 1s such that youcan move out of the boundary
return the reverse
from boundary ones all the 1s connected to it will not

in the cisited array we mark the visited array as 1
perform the bfs traversal



# Intuition
The question is asking us to find number of enclaves where enclaves are the ones that are not on the boundary or not connected to any one on the boundary or are completely enclosed on the boundary 




class Solution {
public:
    int bfs(vector<vector<int>> &grid,vector<vector<int>> & vis){
        int n=grid.size();
        int m=grid[0].size();
        queue<pair<int,int>> q;
        for(int i=0;i<m;i++){
            if(vis[0][i]==0 && grid[0][i]==1){
                vis[0][i]=1;
                q.push({0,i});
            }
        }
        for(int i=0;i<m;i++){
            if(vis[n-1][i]==0 && grid[n-1][i]==1){

                vis[n-1][i]=1;
                q.push({n-1,i});

            }
        }
        for(int i=0;i<n;i++){
            if(vis[i][0]==0 && grid[i][0]==1){
                vis[i][0]=1;
                q.push({i,0});
            }
        }
        for(int i=0;i<n;i++){
            if(vis[i][m-1]==0 && grid[i][m-1]==1){
                vis[i][m-1]=1;
                q.push({i,m-1});
            }
        }
        vector<int> deltarow={1,0,-1,0};
        vector<int> deltacol={0,1,0,-1};
        while(!q.empty()){
            int row=q.front().first;
            int col=q.front().second;
            q.pop();
            for(int i=0;i<4;i++){
                int nrow=row+deltarow[i];
                int ncol=col+deltacol[i];
                if( nrow>=0 && nrow<n && ncol>=0 && ncol<m &&vis[nrow][ncol]==0 && grid[nrow][ncol]==1){
                    vis[nrow][ncol]=1;
                    q.push({nrow,ncol});
                }
            }
        }
        int count=0;
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(grid[i][j]==1 && vis[i][j]==0){
                    count++;
                }
            }
        }
        return count;
    }

    int numEnclaves(vector<vector<int>>& grid) {
        int n=grid.size();
        int m=grid[0].size();
       vector<vector<int>> vis(n,vector<int>(m,0));
      int ans= bfs(grid,vis);
      return ans;

    }
};
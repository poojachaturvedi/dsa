why same algo as for the undirected graph won't work?

--if we visit adjacent node which is not a parent then cycle exist: for undirected graph
--if on the path  we visit the same node again then there is a cycle :for directed graph
--two visited array ad a path visited array 
--component wise 
--if the node is visited and path visited
--return false from node that doesnt contain cycle and make it zero again or omit it from path visited
--if a node is visited and not path visited then there is no cycle 


mark visited and path-visited-- then there is a cycle that exists

bool dfs(int node,vector<int>adj[],int vis[],int pathVis[]){
vis[node]=1;
pathVis[node]=1;
for(auto  it:adj[node]){
if(!vis[it]){
if(dfs(it,adj,vis,pathVis)==true)
return true;
}
else if(vis[i]==1 && pathVis[it]==1)
return true;
}
}
pathVis[node]=0;
return 0;
}


bool isCyclic(int v,vector<int>adj[]){
int vis[V]=0;
int pathVis[V]={0};
for(int i=0;i<V;i++){
if(dfs(i,adj,vis,pathVis)==true)
return true;
}
}
return false;
}

time complexity: v+e
every node will have one edge 
space complecity:
2n 


using single vis 
mark vis as 1 and path vis as 2



ycle--if we are able to come back to the same node then there is a cycle

  2-----5
 /	   \
1	    7
 \	   /
  3-----6
 /
4

adjacency list
1-{2,3}
2-{1,5}
3-{1,4,5}
4-{3}
5-{2,7}
6-{3,7}
7-{5,6}


bfs traversals:
1 23 546 7
1 23  456 7
1 32  645 7
1 32 465  7


We started from two different parts and we will collide if and only  if they collide at some point


APPROACH--
define the queue Q <pair<int,int>> q  if it is first node <1,-1> <Current node ,parent node>
create a visited array and all of these will be marked as zero except the source node


QUEUE
1, -1

2,1

3,1


3,1
2,5


2,5
3,4
3,6



5,7
6,7 but in visited it has already been marked it can only happen if there is a node before the the current element it means it has a cycle

dfs--if it reaches back to the same point from  where you started then there is a cycle


dfs(1,-1)
carry the parent 
first the call will be made for 2 and then it will be made for 3 before that whatever is visited mark it as visited
dfs(2,1)
dfs(2,5)
dfs(5,7)
dfs(7,6)
dfs(6,3)
dfs(3,4)--false
dfs(3,1)--true

//if there is a true at any step return true which means there is a cycle



bool detect(int node,int parent,vector<int> adj[],int vis[]){
vis[node]=1;
for(auto it:adj[node]){
if(!vis[it]){
if(dfs(it,node,ad,vis)==true)
{return true;
}
else if(parent!=it){
return true;
}
}
}

bool isCycle(int V,vector<int> adj[]){
int vis[V]={0};
for(int i=0;i<V;i++){
if(!vis[i]){
if(detect(i,-1,adj,vis)==true))
return true;
}
}
return false;
}


in case of multiple component graph there will be certain issue



TIME COMPLEXITY:
dfs traversal(N+2E) +O(N) as we are running a for loop
SPACE COMPLEXITY:
recursion stack place--O(n)



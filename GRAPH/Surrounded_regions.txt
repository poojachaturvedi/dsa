Replace O's with X's
target is to replace the 0s with Xs that are surrounded by X
 x o x x
 x o x x
 x o o x
 x o x x 
 x x o o
diagonals are not considered only the top bottom left and right are considered

--if someone is on the boundary he can't be covered 
-- a set of x connected to a boundary o can't be connected
--we need to go through the connections
--if there is a boundary in the surrounded region then it can't be converted to x anyhow
--start from the boundary zeroes there can be multiple and mark them that they will not be converted and convert the remaining o's


x x x x x
x o o x o
x x o x o
x o x o x
o o x x x


we will create a corresponding visited matrix
o o o o o
o o o o o
o o o o o
o o o o o
o o o o o



if there is an o  on the boundary call the dfs for all the elements connected to it and which is o
if no further traversal  then return the ans
if someone doesn't visit from the boundary

algorithm:
from bonndar find os and traverse and mark all os connnected to it

public:
void dfs(int row,int col,vector<vector<char>>mat,vector<vector<int>>& vis){
vis[row][col]=1;
int n=mat.size();
int m=mat[0].size();
int drow[]={-1,0,1,0}
int dcol[]={0,1,0,-1}
for(int i=0;i<4;i++){
int nrow=row+drow[i];
int ncol=col+dcol[i];
if(nrow>=0 && nrow<n && ncol>=0 && ncol<m && !vis[nrow][ncol] && mat[row][col]=='O'){
dfs(nrow,ncol,mat,vis);
}
}

}
vector<vector<char>> fill(int n,int m,vector<vector<char>>mat){
	vector<vector<int>> vis(n,vector<int>(m,0));
	for(int i=0;i<m;i++){
		if(mat[0][i]=='O' && !vis[0][i]){
			vis[0][i]=1;
			dfs(0,j,vis,mat);
			}
		if(mat[n-1][j]=='O' &&  !vis[n-1][i]) {
			vis[n-1[[i]=1;
			dfs(n-1,j,vis,mat);
			}
	}
	for(int i=0;i<n;i++){	
		if(mat[i][0]=='O' && !vis[i][0]){
			vis[i][0]=1;
			dfs(i,0,vis,mat);
		}	
		if(mat[m-1][0]=='O' && !vis[m-1][0] ){
			vis[m-1][0]=1;
			dfs(i,m-1,vis,mat);
		}	
	}


	for(int i=0;i<n;i++){
		for(int j=0;j<m;j++){

			if(!vis[i][j] && mat[i][j]=='O'){
				mat[i][j]='x';
			}
}
}


}

}


Time complexity: O(n*M)
Space complexity:O(N*M)


 void dfs(int row , int col ,vector<vector<char>>&board,vector<vector<int>>&vis , vector<int>delRow, vector<int>delCol){
       vis[row][col]=1;
       int n = board.size() , m = board[0].size();
       //check all 4 direction
       for(int i=0;i<4;i++){
           int nrow = row+delRow[i];
           int ncol  = col+delCol[i];

           //if valid 
           if(nrow>=0 and nrow<n and ncol>=0 and ncol<m and !vis[nrow][ncol] and board[nrow][ncol]=='O'){
               //mark visited 
               vis[nrow][ncol]=1;
               //dfs call 
               dfs(nrow,ncol,board,vis,delRow,delCol);
           }
       }
   }


 void solve(vector<vector<char>>& board) {
         
        int n = board.size() , m = board[0].size();
        vector<vector<int>>vis(n,vector<int>(m,0));
       
        vector<int>delRow={-1,0,+1,0} ; 
        vector<int>delCol={0,+1,0,-1} ; 
       
        for(int j=0;j<m;j++){
            
              if(board[0][j]=='O' and !vis[0][j]){
                  
                   vis[0][j]=1;
                   dfs(0,j,board,vis,delRow,delCol);
              }
             
              if(board[n-1][j]=='O' and !vis[n-1][j]){
                  
                   vis[n-1][j]=1;
                   dfs(n-1,j,board,vis,delRow,delCol);
              }
        }
      
        for(int i=0;i<n;i++){
              
              if(board[i][0]=='O' and !vis[i][0]){
                   
                   vis[i][0]=1;
                   dfs(i,0,board,vis,delRow,delCol);
              }
                if(board[i][m-1]=='O' and !vis[i][m-1]){
                  
                   vis[i][m-1]=1;
                   dfs(i,m-1,board,vis,delRow,delCol);
              }
        }
      
      for(int i=0;i<n;i++){
          for(int j=0;j<m;j++){
              if(board[i][j]=='O' && !vis[i][j]) {
                  board[i][j]='X';
              }
          }
      }
    }
#include <bits/stdc++.h> 
#include <unordered_map>
#include <queue>
#include <list>
#include <set>
void prepareAdjList(unordered_map <int, set<int> > &adjList , vector<pair<int, int>> &edges)
{
   for ( int i = 0 ; i < edges.size() ; i++ ) {
       int u = edges[i].first ; 
       int v = edges[i].second ; 
       
       adjList[u].insert(v) ;
       adjList[v].insert(u) ;        
   }
}

void bfs (unordered_map <int, set<int> > &adjList , unordered_map <int , bool> &visited , vector <int> &ans , int node) 
{
   queue <int> q ; 
   q.push(node) ;
   visited[node] = 1 ; 
   
   while ( !q.empty() )  {
       int frontNode = q.front() ;
       q.pop() ;
       
//          STORE  FRONTNODE INTO ANSWER 
       ans.push_back(frontNode) ;
       
//          TRAVERSE ALL NEIGHBOUR OF FRONT NODE 
       for (auto i : adjList[frontNode]) {
           if ( !visited[i] ) {
               q.push(i) ;
               visited[i] = 1 ; 
           }
        }
   }
}

vector<int> BFS(int vertex, vector<pair<int, int>> edges)
{
    unordered_map <int, set<int> > adjList ; 
    vector <int> ans ; 
    unordered_map <int , bool> visited ;
   
   prepareAdjList(adjList , edges) ;
//       printAdj (adjList) ;
//      TRAVERSE ALL COMPONENT OF GRAPH 
   for ( int i = 0 ; i < vertex ; i++ )
   {
         if  ( !visited[i] )
         {
           bfs(adjList , visited , ans , i) ;
         }
   }  
     return ans ; 
}

//set stores in the logicalorder
//instead of push_back we use the insert function for set
//disconnected components need the for loop 

//tc:O(N+E)
//SC:O(N+E)
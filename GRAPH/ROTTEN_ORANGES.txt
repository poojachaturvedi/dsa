We will be given a 2D matrix
0-- empty
1--fresh oranges
2--rotten oranges

if there is a rotten orange then it can rotten the oranges in up,down,right and left direction


we need to find the minimum time to rotten an oranges

multi-point bfs

simultaneous rotting of oranges in case of multiple rotten oranges

if there are unreachable oranges, then  it doesn't matter
so this case we return -1

as we are going to same level at any point of time so we use the bfs here
dfs can't be applied to this question because we would have gone in the depth

--define a queue we have number of starting points +time
--create a visited 2D matrix
--the two rotten oranges we pushed it  to the queue
--go to next step and repeat
--variable to keep track of the maximum time 



int orangeRotting(vector<vector<int>> grid){
int n=grid.size();
int m=grid[0].size();
queue<pair<int,int>,int>> q;
vector<vector<int>> vis;
for(int i=0;i<n;i++){
for(int j=0;j<m;j++){
if(grid[i][j]==2){
q.push({{i,j},0});
vis[i][j]=2;
}
else {
vis[i][j]=0;
}
}
}
int time =0;
while(!q.empty()){
int row=q.front.first.first();
int col=q.front.first.second();
int t=q.second();
time=max(time,t);
q.pop();
vector<int> r={-1,0,1,0};
vector<int> c={0,1,0,-1};
for(int i=0;i<4;i++){
int drow=row+r[i];
int dcol=col+c[i];
if(drow>0 && drow<n && dcol>0 && dcol<m && (vis[drpw][dcol]==1) &&grid[drow][dcol]==2){
q.push({{drow,dcol},t+1}});
vis[drow][dcol]=2;
}
}
for(int i=0;i<n;i++){
for(int j=0;j<n;j++){

if(!vis[i][j]==2 && grid[i][j]==1){
return -1;
}
}
}
return time;
}

method 2:
COUNT FRESH METHOD

Space Complexity
queue -- max all oranges can be rotten n*m
Time complexity
n*m loop
for every node we will run this loop  for 4 times
so n*m is the time complexity



Cycle--if we are able to come back to the same node then there is a cycle

  2-----5
 /	   \
1	    7
 \	   /
  3-----6
 /
4

adjacency list
1-{2,3}
2-{1,5}
3-{1,4,5}
4-{3}
5-{2,7}
6-{3,7}
7-{5,6}


bfs traversals:
1 23 546 7
1 23  456 7
1 32  645 7
1 32 465  7


We started from two different parts and we will collide if and only  if they collide at some point


APPROACH--
define the queue Q <pair<int,int>> q  if it is first node <1,-1> <Current node ,parent node>
create a visited array and all of these will be marked as zero except the source node


QUEUE
1, -1

2,1

3,1


3,1
2,5


2,5
3,4
3,6



5,7
6,7 but in visited it has already been marked it can only happen if there is a node before the the current element it means it has a cycle


private:
bool detect(int src,vector<int> adj[],int vis[]){
vis[src]=1;
queue<pair<int,int>> q;
q.push({src,-1});
while(!q.empty()){
int node=q.front().first;
int parent=q.front().second;
q.pop();


for(auto adjNode:adj[Node]){
if(!vis[adjNode]){
vis[adjNode]=1;
q.push(adjNode,node});
}
//if someone is visited and it is not a parent then it is not a cycle 
else if(parent!=adjacentNode){
return true;
}


}
}

bool isCycle(int V,vector<int> adj[]){
int visited[V]={0};

for(int i=0,i<V;i++){
if(!vis[i]){
{
if(detect(i,adj,vis)==true){
return true;
}
return false;
}


 we say a graph to have cycle if any of the component has cycle

Time complexity:
detect: n*adjacent nodes
//it is a summation of degrees
O(N+2E)
summation of adjacent nodes=summation of nodes indegree
Space 	Complecity:
O(n)-- for queue
O(n) --for the list


for disconnected components, 
do it looping and don't check for rest of the components

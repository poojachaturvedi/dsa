#include<iostream>
#include<unordered_map>
#include<list>
using namespace std;

class graph{
    public:
    unordered_map <int,list<int>> adj;
    void addedge(int u,int v,bool dir){
      adj[u].push_back(v);
        if(dir==0){
            adj[v].push_back(u);
            
        }
    }
    void print(){
        for(auto i:adj){
            cout<<i.first<<" -> ";
            for(auto j:i.second){
               cout<<j<<" ";
            }
            cout<<endl;
        }
    }
};

int main(){
    int n,m;
    cin>>n>>m;
    graph g;
    for(int i=0;i<m;i++){
      int u,v;
     cin>>u>>v;
        g.addedge(u,v,false);
    }
  g.print();
    return 0;
}

FOR GENERIC GRAPH:
#include<iostream>
#include<unordered_map>
#include<list>
using namespace std;
<template typename T>

class graph{
    public:
    unordered_map <T,list<T>> adj;
    void addedge(T u,T v,bool dir){
      adj[u].push_back(v);
        if(dir==0){
            adj[v].push_back(u);
            
        }
    }
    void print(){
        for(auto i:adj){
            cout<<i.first<<" -> ";
            for(auto j:i.second){
               cout<<j<<" ";
            }
            cout<<endl;
        }
    }
};

int main(){
    int n,m;
    cin>>n>>m;
    graph<int> g;
    for(int i=0;i<m;i++){
      int u,v;
     cin>>u>>v;
        g.addedge(u,v,false);
    }
  g.print();
    return 0;
}